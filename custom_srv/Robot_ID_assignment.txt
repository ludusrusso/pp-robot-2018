---------------------------------- INTENT -------------------------------------

We want to create an automated system to univoquely assign specific name and topics
for each new robot joining the network. In this way, each robot will publish and subscribe
only on its related topics, without interfering with other ones.

-------------------------------- METHODOLOGY ----------------------------------

1) Create the srv folder in the intended package forlder
2) Create the new_service_type.srv

        i.e.:
                ---
                int8 ID

                The upper part of the service is related to the service Request,
                sent by the service client, and in this case it is an Empty field.
                The part below the "---" is related to the service Response,
                which will be returned from the server, after the service call.

3) Modify "package.xml" and "CMakeLists.txt" as mentioned in the raspberry/Ros_notes.txt,
    section CREATING A ROS SERVICE.
4) Create the server and client python program implementing the intended functionality,
    stored in the folder custom_srv/scripts. See expample in raspberry/Ros_notes.txt,
    section WRITING A SERVICE AND CLIENT.

-------------------------- HANDSHAKE MASTER-ROBOT(S) --------------------------

The setup consists in executing the service_server on the Master machine (our "Arbiter").
It aims to satisfy requests generated by the activation of a new robot, present in the network,
asking for a unique ID (in this case an int8, which appended to its name and related topics
guarantee to avoid conflicts).

- On the Master side, execute the ID_service_server.py:

    $ rosrun custom_srv ID_service_server.py

- On the Robot(s) side, execute ID_service_client.py, at robot poweron:

    $ rosrun custom_srv ID_service_client.py

When the ID is provided to the client, it will be appended to the general name and
the general topic by executing the command :

    $ rosrun rosserial_python serial_node.py /dev/ttyACM0 __name:=Robot1
        topic1:=Robot1/topic1 topic2:=Robot1/topic2 ...

        i.e. : Let's imagine two robots enter in the network. The resulting name and
                topics will be the following :

                  $ rosnode list

                      /Robot1
                      /Robot2

                  $ rostopic list

                      /Robot1/topic1
                      /Robot1/topic2
                      /Robot2/topic1
                      /Robot2/topic2

              Robot1 will publish and/or subscribe over the two topics /Robot1/topic1,
              /Robot1/topic2.
              Robot2 will publish and/or subscribe over the two topics /Robot2/topic1,
              /Robot2/topic2.
