REFERENCES:

    General documentation:
    https://docs.docker.com/engine/docker-overview/#what-can-i-use-docker-for
    here we can find information about the general structure of docker and what it can be used for

    Guide for Raspberry:
    https://blog.alexellis.io/getting-started-with-docker-on-raspberry-pi/
    practical guide to start using docker on raspberrypi

    Getting started with docker:
    https://docs.docker.com/get-started/#test-docker-installation

        About:
            -Dokerfile: - must create a new EMPTY FOLDER, change directory to this folder and here create the Dokerfile
                        - this document defines the behavior of the container after the build process
                        - NOTE the ADD command which can be very useful to copy our ROS_ws in the container
            -BUILD: inside the dockerfile folder issue the build command:
                    docker build -t "user_name/repo_name:image_tag" .
                    Note the . at the end meaning to build from dockerfile in this folder
            -docker-compose: -allows us to define services, it "say how the image will run"
                             -docker-compose.yml file is what we write to specify how the container should behaves
                             -to run the service: 
                                docker-compose run name_of_service bash
    
    Docker volumes:
    https://docs.docker.com/storage/volumes/

        About:
            "Volumes are the preferred mechanism for persisting data generated by and used by Docker containers. 
            While bind mounts are dependent on the directory structure of the host machine, volumes are completely managed by Docker"
        Experienced:
            We tried to use volumes, but we had some troubles. 
            MAC: the volumes seems to be not directly accessible by mac filesystem, since docker is running inside a VM.
                 So, the path returned by "docker volume inspect volume_name" is relative to the VM and not to the MAC.
                 SOLUTION: use BIND MOUNTING, which provide almost same capabilities of volumes, but the shared folder refers 
                            to the host filesystem
                            https://docs.docker.com/docker-for-mac/osxfs/
                            To mount a shared folder inside a docker container:
                            docker run --rm -it -v ~/docker_ROS/ros_ws:/mnt/ros_volume pfrancesco/rpi2:updated
                            this command performs:
                                run the pfrancesco/rpi2:updated image
                                -- rm: automatically remove the container once we exit from it 
                                -v: mount the ros_ws folder inside /mnt/ros_volume folder in the container

BASIC COMMANDS:
    - docker run --rm -it pfrancesco/rpi2:updated bash
    - docker build -t "pfrancesco/rpi2:new_tag" .
    - docker rm $(docker ps -a -f status=exited -q) (to close all opened containers)
    - docker run --rm -it -v ~/docker_ROS/ros_ws:/mnt/ros_volume pfrancesco/rpi2:updated (to run and mount the shared folder)
                                


